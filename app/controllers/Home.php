<?php
defined('BASEPATH') OR exit('No direct script access allowed');

/**
 * Class Home
 * controller of the home page, which means
 * http://www.mysite.com/home/*
 *
 * steps for subject to take an exam:
 * 1. fill & submit 'subject information' form
 * 2. get resume code (better to record it on your cellphone)
 * 3. start exam
 * 4. answer questions one by one (can't modify answered questions)
 * 5. stop exam (close browser), go grab a pizza and come back any time you want
 * 6. resume exam with the recorded resume code
 * 7. finish exam
 * 8. on admin side, the score is generated in real-time
 *
 * @since v0.1.0
 * @author bcli, 2016-8-9
 */
class Home extends CI_Controller
{
	private $out;   // config array

	public function __construct()
	{
		parent::__construct();
		$this->out = $this->conf->config;   // set config array in constructor
	}
    /**
     * ------------------------------------
     *              ROUTES
     * ------------------------------------
     */
    /**
     * Home page
     * @route http://www.mysite.com/home
     */
    public function index()
    {
        $this->tool->re('home/form');
    }
	/**
	 * (Actual) Home page
	 * @route http://www.mysite.com/home/form[/errCode]
     * @param errCode, a error code corresponding to a error message,
     * all error codes are defined under ./app/language/
	 */
	public function form ($errCode = null)
	{
        $data = array (
                        'errCode' => $errCode
        );
        $this->tool->render('home', $data, true);
	}
	/**
     * set page (session) language
     * we provide a API for user to set page language manually, since browser language detection
     * does not work every well.
     * this function is called by the dropdown menu on the top right corner of the page
	 * @route http://www.mysite.com/home/lang[/langCode]
	 * @param $langCode, language code to be set, ex: 'ja' for japanese, see ./app/language for more
     * language codes of PsychoCat are based on ISO 639-1
     * @see   http://www.w3schools.com/tags/ref_language_codes.asp to know more about ISO 639-1
	 */
	public function lang ($langCode)
	{
        // NOTE: if you set a unsupported language, ex: 'ab' for `Abkhazian`,
        // the system will automatically reset it to 'en' for 'English'
        // set session language
		$this->tool->setSessionLang($langCode);
        // redirect to home/form, then the language session will be applied by $this->tool->render();
		$this->tool->re('home/form');
	}
    /**
     * for a new test, show the newly generated resume code
     * for a resumed test, resume code will be required as form field
     * in both cases, the resume code will be submitted to /exam/index, from there, a exam session will be set,
     * which can be further proceed to /exam/tips then /exam/next
     * @param int $errCode, error code which is corresponding to a error message, see ./app/language for more
     * @param resume_code, a 4 character string randomly generated by system to represent a test
     */
    public function resume ($errCode = -1, $resume_code = null)
    {
        $data = array (
                        'errCode'       => $errCode,
                        'resume_code'   => $resume_code
        );
        $this->tool->render('home_code', $data);
    }

	/**
     * validate subject information form, the fields we are going to validate are:
     *
     * name         : name of the subject
     * occupation   : job title of the subject
     * gender       : 1 = male, 0 = female
     * birthday     : in a format of YYYY-MM-DD, PsychoCat will calculate age based on birthday
     * education    : 1 = primary school, 2 = middle school, 3 = high school, 4 = bachelor, 5 = master, 6 = PHD
     * marriage     : 1 = married, 0 = unmarried
     * bloodType    : A | B | AB | O
     * captcha      : 4 character string
     *
     * this form is submitted by POST method
	 * @route http://www.mysite.com/home/check
	 */
	public function check ()
	{
        // [1]  XSS filter, which will (hopefully) save us from SQL injections
        $in = $this->input->post(NULL, TRUE);
        // [2]  Are all fields submitted ?
        //      NOTE: fields have been pre-checked by client-side JavaScript
        //      NOTE: but still we should NEVER TRUST USER INPUT !! NEVER !!
        if (!isset($in['name']) || !isset($in['occupation']) || !isset($in['gender']) ||
            !isset($in['birthday']) || !isset($in['education']) || !isset($in['bloodType'])
            || !isset($in['marriage']) || !isset($in['captcha']))
        {
            // NO, redirect to subject information form and print error 'form submission failed'
            $this->tool->re('home/form/10');
        }
            // YES, continue to next step...

		// [3]  Is captcha correct ?
        //      NOTE: captcha is used for (hopefully) preventing a brute force attack,
        //      NOTE: which means cracker uses scripts (or tools like selenium and ChromeDriver)
        //      NOTE: to auto fill & submit the form in a high speed fashion, if this happens,
        //      NOTE: eventually the cracker may figure out our admin username & password
        //      NOTE: or fill the database with junks
        if (!$this->tool->captchaCorrect($in['captcha']))
        {
            // NO, redirect to subject information form and print error 'invalid captcha'
            $this->tool->re('home/form/15');
        }
            // YES, continue to next step...

        // [4] Are all subject information submitted in a right format ?
        //      NOTE: fields have been checked by client side JavaScript using THE SAME REGULAR EXPRESSIONS
        //      NOTE: AS SERVER, which can be found in ./app/libraries/Conf.php
        //      NOTE: but still, we SHOULD NEVER TRUST USER INPUT, so check it again!
        // get regular expression database from ./app/libraries/Conf.php
        $regexArray = $this->out['REGEX'];
		// check fields by regular expression, one by one
        // initialize an error counter
		$error = 0;
		foreach ($regexArray['subject_form'] as $field => $regex)
		{
			if (isset($in[$field]))
            {
                $in[$field] = trim($in[$field]);
                if (!preg_match($regex, $in[$field]))
                {
                    // increase error counter if there's a unmatched regex
                    $error ++;
                }
                else
                {
                    continue;
                }
			}
			else
            {
                $error++;
			}
		}
        // regex check done
        // now count how many errors we got...

        // [5] Have all fields been passed the regex check?
        if ($error != 0) {
            // NO, redirect to subject info form and print error message 'form submission failed'
            $this->tool->re('home/form/10');
        }
            // YES,  continue to next step...

        // [6] Is the subject name existed in database ?
        //     since we don't want one guy to submit 2 times
        if ($this->m_exams->nameExists($in['name']))
        {
            // YES, then redirect to subject info form and print error message 'name already exists'
            $this->tool->re('home/form/11');
        }
        else
        {
            // NO, then try insert a new subject info record to database
            $resume_code = $this->tool->generateResumeCode();               // generate test resume code
            $ip          = $this->input->ip_address();                      // get user IP address
            $age         = $this->tool->getAgeByBirthday($in['birthday']);  // calculate user age by birthday
            // insert all subject information to database
            $dbResult = $this->m_exams->add($in['name'], $in['occupation'], $in['gender'], $in['birthday'],$age, $in['education'],
                $in['bloodType'], $in['marriage'], $resume_code, $ip, date("Y-m-d H:i:s"));

            // [7] Are subject information successfully inserted ?
            if ($dbResult)
            {
                // YES, redirect to /home/resume with resume_code, that's the sub-controller which
                // will handle from resume_code to exam session
                $this->tool->re('home/resume/-1/'.$resume_code);
            }
            else
            {
                // NO, redirect to subject information form and print 'database error'
                $this->tool->re('home/form/6');
            }
        }
	}
    /**
     * get a new captcha by AJAX request
     * @route http://www.mysite.com/home/captcha
     */
    public function captcha ()
    {
        $this->tool->renewCaptcha();
        echo $this->tool->createCaptcha();
    }
}